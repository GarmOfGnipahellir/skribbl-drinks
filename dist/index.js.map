{"version":3,"file":"index.js","sources":["../src/parser.ts","../src/index.ts","../src/utils.ts"],"sourcesContent":["export enum MessageType {\n  UNKNOWN,\n  GUESS,\n}\n\nexport interface ParsedMessage {\n  type: MessageType;\n  player: string;\n}\n\nexport function parseMessage(content: string): ParsedMessage {\n  let matches: RegExpExecArray;\n\n  matches = /^(.+?): .*/g.exec(content);\n  if (!!matches) {\n    return { type: MessageType.GUESS, player: matches[1] };\n  }\n\n  return { type: MessageType.UNKNOWN, player: \"unknown\" };\n}\n","import { addWaterMark } from \"./utils\";\nimport { parseMessage, MessageType } from \"./parser\";\n\nconst screenGame = document.getElementById(\"screenGame\");\nconst boxMessages = document.getElementById(\"boxMessages\");\n\nfunction onGameStarted(): void {\n  console.log(\"Game started!\");\n}\n\nfunction onMessageAdded(content: string): void {\n  console.log(`Message added: ${content}`);\n\n  const parsed = parseMessage(content);\n  console.log(`Message parsed: ${parsed}`);\n\n  switch (parsed.type) {\n    case MessageType.GUESS:\n      console.log(`${parsed.player} made a guess!`)\n      break;\n  }\n}\n\n// look for attribute changes on the screenGame element\nnew MutationObserver(() => {\n  if (screenGame.style.display === \"none\") return;\n  onGameStarted();\n}).observe(screenGame, { attributes: true });\n\n// look for child changes on the boxMessages element\nnew MutationObserver((mutations) => {\n  for (const mutation of mutations) {\n    for (const node of mutation.addedNodes) {\n      onMessageAdded(node.textContent);\n    }\n  }\n}).observe(boxMessages, { childList: true });\n\n// show user that drinks are enabled\naddWaterMark();\n","export function addWaterMark(): void {\n  const waterMarkNode = document.createElement(\"div\");\n  waterMarkNode.style.position = \"fixed\";\n  waterMarkNode.style.top = \"9px\";\n  waterMarkNode.style.right = \"9px\";\n  waterMarkNode.style.fontSize = \"48px\";\n  waterMarkNode.style.color = \"#ffffff\";\n  waterMarkNode.textContent = \"Drinks üç∫\";\n  document.body.appendChild(waterMarkNode);\n}\n"],"names":["MessageType","screenGame","document","getElementById","boxMessages","onMessageAdded","content","console","log","parsed","matches","exec","type","GUESS","player","UNKNOWN","parseMessage","MutationObserver","style","display","observe","attributes","mutations","mutation","node","addedNodes","textContent","childList","waterMarkNode","createElement","position","top","right","fontSize","color","body","appendChild","addWaterMark"],"mappings":"IAAYA,GAAZ,SAAYA,GACVA,yBACAA,qBAFF,CAAYA,IAAAA,OCGZ,MAAMC,EAAaC,SAASC,eAAe,cACrCC,EAAcF,SAASC,eAAe,eAM5C,SAASE,EAAeC,GACtBC,QAAQC,sBAAsBF,KAE9B,MAAMG,WDHqBH,GAC3B,IAAII,EAGJ,OADAA,EAAU,cAAcC,KAAKL,GACvBI,EACG,CAAEE,KAAMZ,EAAYa,MAAOC,OAAQJ,EAAQ,IAG7C,CAAEE,KAAMZ,EAAYe,QAASD,OAAQ,WCL7BE,CAAaV,GAG5B,OAFAC,QAAQC,uBAAuBC,KAEvBA,EAAOG,MACb,KAAKZ,EAAYa,MACfN,QAAQC,OAAOC,EAAOK,yBAM5B,IAAIG,iBAAiB,KACc,SAA7BhB,EAAWiB,MAAMC,SAlBrBZ,QAAQC,IAAI,mBAoBXY,QAAQnB,EAAY,CAAEoB,YAAY,IAGrC,IAAIJ,iBAAkBK,IACpB,IAAK,MAAMC,KAAYD,EACrB,IAAK,MAAME,KAAQD,EAASE,WAC1BpB,EAAemB,EAAKE,eAGvBN,QAAQhB,EAAa,CAAEuB,WAAW,eCnCnC,MAAMC,EAAgB1B,SAAS2B,cAAc,OAC7CD,EAAcV,MAAMY,SAAW,QAC/BF,EAAcV,MAAMa,IAAM,MAC1BH,EAAcV,MAAMc,MAAQ,MAC5BJ,EAAcV,MAAMe,SAAW,OAC/BL,EAAcV,MAAMgB,MAAQ,UAC5BN,EAAcF,YAAc,YAC5BxB,SAASiC,KAAKC,YAAYR,GD+B5BS"}