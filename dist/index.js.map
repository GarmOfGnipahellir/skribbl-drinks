{"version":3,"file":"index.js","sources":["../src/parser.ts","../src/index.ts","../src/utils.ts"],"sourcesContent":["export enum MessageType {\r\n  UNKNOWN,\r\n  GUESS,\r\n}\r\n\r\nexport interface ParsedMessage {\r\n  type: MessageType;\r\n  player: string;\r\n}\r\n\r\nexport function parseMessage(content: string): ParsedMessage {\r\n  let matches: RegExpExecArray;\r\n\r\n  matches = /^(.+?): .*/g.exec(content);\r\n  if (!!matches) {\r\n    return { type: MessageType.GUESS, player: matches[1] };\r\n  }\r\n\r\n  return { type: MessageType.UNKNOWN, player: \"unknown\" };\r\n}\r\n","import { addWaterMark } from \"./utils\";\r\nimport { parseMessage, MessageType } from \"./parser\";\r\n\r\nconst screenGame = document.getElementById(\"screenGame\");\r\nconst boxMessages = document.getElementById(\"boxMessages\");\r\n\r\nfunction onGameStarted(): void {\r\n  console.log(\"Game started!\");\r\n}\r\n\r\nfunction onMessageAdded(content: string): void {\r\n  console.log(`Message added: ${content}`);\r\n\r\n  const parsed = parseMessage(content);\r\n  console.log(`Message parsed: ${parsed}`);\r\n\r\n  switch (parsed.type) {\r\n    case MessageType.GUESS:\r\n      console.log(`${parsed.player} made a guess!`)\r\n      break;\r\n  }\r\n}\r\n\r\n// look for attribute changes on the screenGame element\r\nnew MutationObserver(() => {\r\n  if (screenGame.style.display === \"none\") return;\r\n  onGameStarted();\r\n}).observe(screenGame, { attributes: true });\r\n\r\n// look for child changes on the boxMessages element\r\nnew MutationObserver((mutations) => {\r\n  for (const mutation of mutations) {\r\n    for (const node of mutation.addedNodes) {\r\n      onMessageAdded(node.textContent);\r\n    }\r\n  }\r\n}).observe(boxMessages, { childList: true });\r\n\r\n// show user that drinks are enabled\r\naddWaterMark();\r\n","export function addWaterMark(): void {\r\n  const waterMarkNode = document.createElement(\"div\");\r\n  waterMarkNode.id = \"drinksWaterMark\";\r\n  waterMarkNode.style.position = \"fixed\";\r\n  waterMarkNode.style.top = \"9px\";\r\n  waterMarkNode.style.right = \"9px\";\r\n  waterMarkNode.style.fontSize = \"48px\";\r\n  waterMarkNode.style.color = \"#ffffff\";\r\n  waterMarkNode.textContent = \"Drinks üç∫\";\r\n  document.body.appendChild(waterMarkNode);\r\n}\r\n"],"names":["MessageType","screenGame","document","getElementById","boxMessages","onMessageAdded","content","console","log","parsed","matches","exec","type","GUESS","player","UNKNOWN","parseMessage","MutationObserver","style","display","observe","attributes","mutations","mutation","node","addedNodes","textContent","childList","waterMarkNode","createElement","id","position","top","right","fontSize","color","body","appendChild","addWaterMark"],"mappings":"IAAYA,GAAZ,SAAYA,GACVA,yBACAA,qBAFF,CAAYA,IAAAA,OCGZ,MAAMC,EAAaC,SAASC,eAAe,cACrCC,EAAcF,SAASC,eAAe,eAM5C,SAASE,EAAeC,GACtBC,QAAQC,sBAAsBF,KAE9B,MAAMG,WDHqBH,GAC3B,IAAII,EAGJ,OADAA,EAAU,cAAcC,KAAKL,GACvBI,EACG,CAAEE,KAAMZ,EAAYa,MAAOC,OAAQJ,EAAQ,IAG7C,CAAEE,KAAMZ,EAAYe,QAASD,OAAQ,WCL7BE,CAAaV,GAG5B,OAFAC,QAAQC,uBAAuBC,KAEvBA,EAAOG,MACb,KAAKZ,EAAYa,MACfN,QAAQC,OAAOC,EAAOK,yBAM5B,IAAIG,iBAAiB,KACc,SAA7BhB,EAAWiB,MAAMC,SAlBrBZ,QAAQC,IAAI,mBAoBXY,QAAQnB,EAAY,CAAEoB,YAAY,IAGrC,IAAIJ,iBAAkBK,IACpB,IAAK,MAAMC,KAAYD,EACrB,IAAK,MAAME,KAAQD,EAASE,WAC1BpB,EAAemB,EAAKE,eAGvBN,QAAQhB,EAAa,CAAEuB,WAAW,eCnCnC,MAAMC,EAAgB1B,SAAS2B,cAAc,OAC7CD,EAAcE,GAAK,kBACnBF,EAAcV,MAAMa,SAAW,QAC/BH,EAAcV,MAAMc,IAAM,MAC1BJ,EAAcV,MAAMe,MAAQ,MAC5BL,EAAcV,MAAMgB,SAAW,OAC/BN,EAAcV,MAAMiB,MAAQ,UAC5BP,EAAcF,YAAc,YAC5BxB,SAASkC,KAAKC,YAAYT,GD8B5BU"}